# -*- coding: utf-8 -*-
"""
Created on Sat Jan 10 19:59:24 2015

@author: varsha
"""

import hmm;
import inputRead as ir;
import copy;
import numpy as np;
from random import shuffle;
import math;
#obj = hmm.HMM();

A = [[0.4, 0.2, 0.2, 0.2],[0.2, 0.4, 0.2, 0.2],[ 0.2, 0.2, 0.4, 0.2],[ 0.2, 0.2, 0.2, 0.4]];
B = [[0.4, 0.2, 0.2, 0.2],[ 0.2, 0.4, 0.2, 0.2],[ 0.2, 0.2, 0.4, 0.2],[ 0.2, 0.2, 0.2, 0.4] ];
pi = [0.241896, 0.266086, 0.249153, 0.242864 ];

#A = np.array(A);
#B = np.array(B);
#pi = np.array(pi);
#
#obs_seq = [0,1,2,3,3,0,0,1,1,1,2,2,2,3,0,0,0,1,1,1,2,3,3,0,0,0,1,1,1,2,3,3,0,1,2,3,0,1,1,1,2,3,3,0,1,2,2,3,0,0,0,1,1,2,2,3,0,1,1,2,3,0,1,2,2,2,2,3,0,0,1,2,3,0,1,1,2,3,3,3,0,0,1,1,1,1,2,2,3,3,3,0,1,2,3,3,3,3,0,1,1,2,2,3,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,0,1,2,3,0,1,1,1,2,3,0,1,1,2,2,2,2,2,3,0,1,1,1,2,2,2,2,3,0,0,0,0,0,1,1,1,1,2,2,3,3,0,1,2,3,3,0,0,0,0,0,0,1,1,2,2,3,0,0,1,1,1,1,1,1,2,3,3,0,0,1,1,1,2,3,0,0,1,2,3,0,1,1,2,3,3,0,0,0,1,2,3,3,3,0,1,1,1,1,2,3,3,3,3,3,3,0,1,2,2,2,2,2,2,3,0,1,1,1,2,2,3,3,3,3,0,1,2,3,0,0,0,1,1,2,2,3,0,0,0,0,0,0,0,1,2,2,2,3,3,3,3,0,0,1,2,2,2,3,3,3,0,0,1,2,2,3,0,0,0,0,1,1,1,2,3,3,3,3,3,3,3,3,0,1,2,3,0,0,1,2,3,3,3,0,0,0,0,0,1,1,1,1,2,3,0,0,0,1,2,2,3,3,0,0,0,1,1,1,1,1,2,3,3,3,3,0,1,1,1,2,2,3,0,1,2,3,3,3,3,0,0,0,0,1,2,3,3,0,1,2,2,3,3,0,0,1,1,2,3,3,0,1,2,2,3,3,3,0,0,1,1,2,3,3,3,3,0,0,1,1,2,3,3,0,1,2,3,0,1,1,2,2,3,0,1,2,3,3,0,1,1,1,2,2,2,3,3,0,0,1,1,1,1,1,2,3,3,3,0,1,1,2,2,2,2,3,3,0,0,1,2,3,0,1,1,2,2,2,2,3,0,0,1,2,2,3,0,0,0,0,0,1,1,1,2,3,0,0,1,2,3,3,0,0,0,1,2,2,2,3,3,0,0,0,1,2,2,2,2,2,3,0,1,1,2,3,0,0,1,1,1,2,2,3,0,0,0,0,1,1,1,2,2,3,0,1,1,1,2,2,2,3,3,0,0,1,2,2,3,3,3,0,1,1,2,3,0,0,0,0,0,1,2,2,2,3,3,3,0,0,0,1,2,3,0,1,1,2,3,3,3,0,1,2,2,2,3,0,0,1,1,1,1,2,3,3,0,0,0,0,1,2,3,3,3,0,0,0,1,1,2,3,0,1,1,1,1,2,2,2,2,2,2,3,0,0,0,0,1,2,2,2,2,3,0,1,2,2,3,0,1,2,3,0,1,2,3,0,0,0,1,1,2,2,3,3,0,1,1,1,1,2,2,3,3,0,1,1,1,2,2,2,3,3,3,0,1,1,2,3,3,0,1,2,3,0,0,0,0,1,2,3,0,0,0,0,0,0,1,2,2,3,3,0,0,1,2,3,0,1,2,2,3,0,0,0,1,1,2,2,2,2,2,3,3,3,3,3,0,1,2,2,3,3,3,3,3,0,0,1,1,2,2,3,0,0,1,2,2,3,3,3,0,0,0,1,2,2,2,2,3,3,0,1,2,3,0,0,1,1,1,2,2,3,0,0,1,1,2,2,2,3,3,0,0,1,1,1,1,1,2,3,3,3,0,1,2,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,1,2,3,0,0,1,1,1,2,3,0,0,1,1,2,2,2,2,3,3,3,0,1,1,2,2,2,3,3,0,0,0,0,0,0,1,2,2,3,3,0,0,0,0,0,0,1,2,3,3,3,0,1,1,1,2,2,2,2,2,3,3,3,0,1,2,2,2,3,3,3,3,0,0,0,0,1,2,3,3,3,3,3,3,0,0,1,1,1,1,2,3,0,1,2,3,0,1,1,2,3,3,3,0,0,0,0,1,1,2,3,3,3,3,0,0,1,1,1,2,2,2,2,2,2,3,3,0,0,0,1,2,3,0,0,1,1,2,2,3,3,3,3,3,0,0,1,2,2,2,2,3,0,0,1,1,1,1,1,2,3,3,0,0,1,1,1,2,3,3,3,0,0];
#obs_seq = np.array(obs_seq);


#obj.setMatrices(A,B,pi);
#(a,b,p) = obj.getMatrices();
#print "before convergence:";
#print "A:";
#print a;
#print "B:";
#print b;
#print "pi:";
#print p
#obj.converge(obs_seq,25);

#(a,b,p) = obj.getMatrices();
#print "after convergence:";
#print "A:";
#print a;
#print "B:";
#print b;
#print "pi:";
#print p

(posSamples,negSamples)= ir.getSamples();


#sample = posSamples[0];


#posList.append(obj);
#hmmObj = hmm.HMM();
#(a,b,p) = hmmObj.getMatrices();
#print "before convergence:";
#print "A:";
#print a;
#print "B:";
#print b;
#print "pi:";
#print p
#hmmObj.alphaPass(sample);
#hmmObj.betaPass(sample);
#hmmObj.gammaDigamma(sample);
#hmmObj.reestimate(sample);
#hmmObj.converge(sample,20);
#print "after convergence:";
#print "A:";
#print a;
#print "B:";
#print b;
#print "pi:";
#print p

shuffle(posSamples);
shuffle(negSamples);
per = 0.75
def trainData(posSamples,negSamples,per):
    negList = [];    
    posList = [];    
    posLen = len(posSamples);
    negLen = len(negSamples);
    train_len = math.floor(per * posLen);
    posLen = 5;
    train_len = 3;
    negLen = 5;
    
    for i in range(train_len):
        hmmObj = copy.deepcopy(hmm.HMM());
        hmmObj.converge(posSamples[i],500);
        posList.append(hmmObj);
    
    for i in range(train_len):
        hmmObj = copy.deepcopy(hmm.HMM());
        hmmObj.converge(negSamples[i],500);
        negList.append(hmmObj);
        
    return(posList,negList);

#test_len = posLen - train_len;
(posList,negList) = trainData(posSamples,negSamples,0.75);


    
#print "testing:"
maxProb = 0;
whichClass = 0;  #0 for positive and 1 for negative

for test in range(train_len,posLen):
    for obj in posList:
        prob = obj.forwardAlgorithm(posSamples[test]);
        if prob > maxProb:
            maxProb = prob;
            whichClass = 0;
    for obj in negList:
        prob = obj.forwardAlgorithm(posSamples[test]);
        if prob > maxProb:
            maxProb = prob;
            whichClass = 1;
            
    print "classified as:"
    if whichClass == 1:
        print "non-signal";
    else:
        print "signal";

    
#for samples in posSamples:
#    hmmObj = copy.deepcopy(hmm.HMM());
#    hmmObj.converge(samples,500);
#    posList.append(hmmObj);
#    print len(samples);
#
#for samples in negSamples:
#    hmmObj = copy.deepcopy(hmm.HMM());
#    hmmObj.converge(samples,500);
#    negList.append(hmmObj);
#    print len(samples);




#sam1 = posSamples[0];
#sam2 = posSamples[1000];
#sam3 = negSamples[500];

#sam1Obj = copy.deepcopy(hmm.HMM());
#sam1Obj.converge(sam1,300);
#posList.append(sam1Obj);
#sam2Obj = copy.deepcopy(hmm.HMM());
#A = [[0.4, 0.2, 0.2, 0.2],[0.2, 0.4, 0.2, 0.2],[ 0.2, 0.2, 0.4, 0.2],[ 0.2, 0.2, 0.2, 0.4]];
#B = [[0.4, 0.2, 0.2, 0.2],[ 0.2, 0.4, 0.2, 0.2],[ 0.2, 0.2, 0.4, 0.2],[ 0.2, 0.2, 0.2, 0.4] ];
#pi = [0.241896, 0.266086, 0.249153, 0.242864 ];
#A = np.array(A);
#B = np.array(B);
#pi = np.array(pi);

#sam1 = [0,1,2,3,3,0,0,1,1,1,2,2,2,3,0,0,0,1,1,1,2,3,3,0,0,0,1,1,1,2,3,3,0,1,2,3,0,1,1,1,2,3,3,0,1,2,2,3,0,0,0,1,1,2,2,3,0,1,1,2,3,0,1,2,2,2,2,3,0,0,1,2,3,0,1,1,2,3,3,3,0,0,1,1,1,1,2,2,3,3,3,0,1,2,3,3,3,3,0,1,1,2,2,3,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,0,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,0,1,2,3,0,1,1,1,2,3,0,1,1,2,2,2,2,2,3,0,1,1,1,2,2,2,2,3,0,0,0,0,0,1,1,1,1,2,2,3,3,0,1,2,3,3,0,0,0,0,0,0,1,1,2,2,3,0,0,1,1,1,1,1,1,2,3,3,0,0,1,1,1,2,3,0,0,1,2,3,0,1,1,2,3,3,0,0,0,1,2,3,3,3,0,1,1,1,1,2,3,3,3,3,3,3,0,1,2,2,2,2,2,2,3,0,1,1,1,2,2,3,3,3,3,0,1,2,3,0,0,0,1,1,2,2,3,0,0,0,0,0,0,0,1,2,2,2,3,3,3,3,0,0,1,2,2,2,3,3,3,0,0,1,2,2,3,0,0,0,0,1,1,1,2,3,3,3,3,3,3,3,3,0,1,2,3,0,0,1,2,3,3,3,0,0,0,0,0,1,1,1,1,2,3,0,0,0,1,2,2,3,3,0,0,0,1,1,1,1,1,2,3,3,3,3,0,1,1,1,2,2,3,0,1,2,3,3,3,3,0,0,0,0,1,2,3,3,0,1,2,2,3,3,0,0,1,1,2,3,3,0,1,2,2,3,3,3,0,0,1,1,2,3,3,3,3,0,0,1,1,2,3,3,0,1,2,3,0,1,1,2,2,3,0,1,2,3,3,0,1,1,1,2,2,2,3,3,0,0,1,1,1,1,1,2,3,3,3,0,1,1,2,2,2,2,3,3,0,0,1,2,3,0,1,1,2,2,2,2,3,0,0,1,2,2,3,0,0,0,0,0,1,1,1,2,3,0,0,1,2,3,3,0,0,0,1,2,2,2,3,3,0,0,0,1,2,2,2,2,2,3,0,1,1,2,3,0,0,1,1,1,2,2,3,0,0,0,0,1,1,1,2,2,3,0,1,1,1,2,2,2,3,3,0,0,1,2,2,3,3,3,0,1,1,2,3,0,0,0,0,0,1,2,2,2,3,3,3,0,0,0,1,2,3,0,1,1,2,3,3,3,0,1,2,2,2,3,0,0,1,1,1,1,2,3,3,0,0,0,0,1,2,3,3,3,0,0,0,1,1,2,3,0,1,1,1,1,2,2,2,2,2,2,3,0,0,0,0,1,2,2,2,2,3,0,1,2,2,3,0,1,2,3,0,1,2,3,0,0,0,1,1,2,2,3,3,0,1,1,1,1,2,2,3,3,0,1,1,1,2,2,2,3,3,3,0,1,1,2,3,3,0,1,2,3,0,0,0,0,1,2,3,0,0,0,0,0,0,1,2,2,3,3,0,0,1,2,3,0,1,2,2,3,0,0,0,1,1,2,2,2,2,2,3,3,3,3,3,0,1,2,2,3,3,3,3,3,0,0,1,1,2,2,3,0,0,1,2,2,3,3,3,0,0,0,1,2,2,2,2,3,3,0,1,2,3,0,0,1,1,1,2,2,3,0,0,1,1,2,2,2,3,3,0,0,1,1,1,1,1,2,3,3,3,0,1,2,2,2,2,3,3,3,3,3,3,0,0,0,0,0,0,1,2,3,0,0,1,1,1,2,3,0,0,1,1,2,2,2,2,3,3,3,0,1,1,2,2,2,3,3,0,0,0,0,0,0,1,2,2,3,3,0,0,0,0,0,0,1,2,3,3,3,0,1,1,1,2,2,2,2,2,3,3,3,0,1,2,2,2,3,3,3,3,0,0,0,0,1,2,3,3,3,3,3,3,0,0,1,1,1,1,2,3,0,1,2,3,0,1,1,2,3,3,3,0,0,0,0,1,1,2,3,3,3,3,0,0,1,1,1,2,2,2,2,2,2,3,3,0,0,0,1,2,3,0,0,1,1,2,2,3,3,3,3,3,0,0,1,2,2,2,2,3,0,0,1,1,1,1,1,2,3,3,0,0,1,1,1,2,3,3,3,0,0];
#sam1Obj.setMatrices(A,B,pi);

#sam2Obj.converge(sam2,200);

#posList.append(sam2Obj);

#print posList[0].getMatrices();

#print posList[1].getMatrices();
#print "gamma";
#print sam1Obj.gamma;
#print sam2Obj.getMatrices();
#s = '';
#s1 = '';
#for i in sam1:
#    s += str(i);
#for i in sam2:
#    s1 += str(i);
#print s;
#print s1;

    
